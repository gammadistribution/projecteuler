#!/usr/bin/python


"""
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred 
divisors?
"""


import os
import sys
sys.path.append(os.path.join(os.path.split(os.getcwd())[0], 'modules'))

import integers
import time


def T(n):
    """
    The variable n is a positive triangular number.  

    The function returns the sum of the first n triangular numbers using 
    Gauss's famous formula.
    """

    return (n * (n +1)) / 2


def main():
    LIMIT = 500

    i = 1 
    number = 1 
    divisors = 1

    while divisors <= LIMIT:
        number = T(i)
        divisors = integers.divisor_function(number)
        i += 1

    print "answer", number


if __name__ == "__main__":
    main()
