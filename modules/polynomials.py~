#!/usr/bin/python

"""
The following is a utility designed to be used to perform ring operations
on the set of polynomials with coefficients from a field.
"""


class Polynomial():
    def __init__(self, coefficients, var="x"):
        """
        The variable coefficients is a list of elements from a field and the
        var variable represents the variable of the polynomial.

        Note that it is assumed that the coefficient's position in the list
        corresponds to the power that it is associated with.

        For example, [1, 2, 3] represents the polynomial 1x^0 + 2x^1 + 3x^2.
        """
        self.var = var
        self.coefficients = coefficients

    def __add__(self, other):
        addition = self.coefficients[:]
        if len(self.coefficients) < len(other.coefficients):
            difference = len(other.coefficients) - len(self.coefficients)
            addition += [0 for x in range(difference)]
        for i, coefficient in enumerate(other.coefficients):
            addition[i] += coefficient

        # Remove extraneous zeroes.
        while addition[-1] == 0:
            addition.pop()
            if not addition:
                addition = [0]
                break

        return Polynomial(addition, self.var)

    def __sub__(self, other):
        subtraction = self.coefficients[:]
        if len(self.coefficients) < len(other.coefficients):
            difference = len(other.coefficients) - len(self.coefficients)
            subtraction += [0 for x in range(difference)]
        for i, coefficient in enumerate(other.coefficients):
            subtraction[i] -= coefficient

        # Remove extraneous zeroes.
        while subtraction[-1] == 0:
            subtraction.pop()
            if not subtraction:
                subtraction = [0]
                break

        return Polynomial(subtraction, self.var)

    def __call__(self, value):
        return sum([coefficient * (value ** i) for i, coefficient
                    in enumerate(self.coefficients)])
            
    def __repr__(self):
        return str(self.coefficients)

    def __str__(self):
        strings = ["{}{}^{}".format(coefficient, self.var, i)
                   for i, coefficient in enumerate(self.coefficients)]
        return " + ".join(strings)

    def scalar(self, element):
        """
        Performs scalar multiplication on polynomial by the variable element.
        
        Alters self.coefficients of the Polynomial instance by
        multiplying each entry of self.coefficients by element.
        """
        self.coefficients = [c * element for c in self.coefficients]
